# day03

2. 데이터 입출력
    2-1. 외부 파일 읽어오기
        * 판다스 데이터 입출력 도구(http://pandas.pydata.org)

            File Format     |        Reader        |        Writer
        -----------------------------------------------------------------
        CSV                 |   read_csv           |    to_csv
        JSON                |   read_json          |    to_json
        HTML                |   read_html          |    to_html
        Local clipboard     |   read_clipboard     |    to_clipboard
        MS Excel            |   read_excel         |    to_excel
        HDF5 Format         |   read_hdf           |    to_hdf
        SQL                 |   read_sql           |    to_sql
        -----------------------------------------------------------------
                
        2-1-1. CSV(comma_separated values) 파일
            쉼표(,)로 열을 구분하고 줄바꿈으로  행 구분
            CSV 파일 → 데이터프레임: pandas.read_csv(*파일 경로(이름)*)

            1) header 옵션: 열 이름으로 사용할 행 지정
                header=0 (기본 값: 0행을 열 지정): df = read_csv(파일이름)
                header=1 (1행을 열 지정): df = read_csv(file, header=1)
                header=None (행을 열 지정하지 않음): df = read_csv(flie, header=None)

            2) index_col 옵션: 데이터프레임의 행 인덱스가 되는 열 지정
                index_col=False (인덱스 지정하지 않음): df = read_csv(file, index_col=False)
                index_col='c0' ('c0'열을 인덱스 지정): df = read_csv(file, index_col='c0')
                
            CSV 파일에 따라서 쉼표 대신 탭(\t)이나 공백(" ")으로 텍스트를 구분하기도 함
            이때는 구분자 옵션을 알맞게 입력해야 한다.

            * read_csv 함수의 옵션    
                    옵션            |            설명
            ------------------------------------------------------------------------------------------
            path                        파일의 위치(파일명 포함), URL
            ------------------------------------------------------------------------------------------
            sep(또는 delimiter)         텍스트 데이터를 필드별로 구분하는 문자
            ------------------------------------------------------------------------------------------
            header                      열 이름으로 사용될 행의 번호(기본값은 0)
                                        header가 없고 첫 행부터 데이터가 있는 경우 None으로 지정 가능
            ------------------------------------------------------------------------------------------
            index_col                   행 인덱스로 사용할 열의 번호 또는 열 이름
            ------------------------------------------------------------------------------------------
            names                       열 이름으로 사용할 문자열의 리스트
            ------------------------------------------------------------------------------------------
            skiprows                    처음 몇 줄을 skip할 것인지 설정(숫자 입력)
                                        skip하려는 행의 번호를 담은 리스트로 설정 가능(예: [1, 3, 5])
            ------------------------------------------------------------------------------------------
            parse_dates                 날짜 텍스트를 datetime64로 변환할 것인지 설정(기본값은 False)
            ------------------------------------------------------------------------------------------
            skip_footer                 마지막 몇 줄을 skip할 것인지 설정(숫자 입력)
            ------------------------------------------------------------------------------------------
            encoding                    텍스트 인코딩 종류를 지정(예: 'utf-8')
            ------------------------------------------------------------------------------------------

        2-1-2. Excel 파일
            Excel 파일 → 데이터프레임: pandas.read_excel("파일 경로(이름)")
            아나콘다 배포판을 사용하지 않는 경우 "ImportError: Install xlrd >= 0.9.0 for Excel support"

        2-1-3. JSON 파일
            JSON 파일 → 데이터프레임: pandas.read_json("파일 경로(이름)")
            

    2-2. 웹(Web)에서 가져오기
        2-2-1. HTML 웹 페이지에서 표 속성 가져오기
            - read_html() 함수는 HTML 웹 페이지에 있는 <table> 태그에서 표 형식의 데이터를 모두 찾아서 데이터프레임으로 변환한다.
            - 표 데이터들은 각각 별도의 데이터프레임으로 변환되기 때문에 여러 개의 데이터프레임(표)을 원소로 갖는 리스트가 반환됨.

            HTML 표 속성 읽기: pandas.read_html( *웹 주소(URL)* 또는 *HTML 파일 경로(이름)* )
        
        2-2-2. 웹 스크래핑
            *** BeautifulSoup 등 웹 스크래핑 도구로 수집한 데이터를 처리하는 방법
            1) 스크래핑한 내용을 리스트, 딕셔너리 등으로 정리
            2) DataFrame() 함수에 리스트나 딕셔너리 형태로 전달하여 데이터프레임으로 변환

        참고 ] 데이터베이스에서 판다스로 데이터를 가져올 수 있을까?
            판다스 read_sql() 함수를 이용하면 SQL 쿼리를 가지고 데이터베이스로부터 데이터를 불러올 수 있음
            이 때 읽어온 데이터는 데이터프레임 포맷으로 저장됨

    2-3. API 활용하여 데이터 수집하기
        대부분의 API는 판다스에서 읽어올 수 있는 파일 형식(csv, json, xml...)을 지원한다.

    2-4. 데이터 저장하기
        2-4-1. CSV 파일로 저장
            DataFrame 객체.to_csv("파일 이름(경로)")

        2-4-2. JSON 파일로 저장
            DataFrame 객체.to_json("파일 이름(경로)")

        2-4-3. Excel 파일로 저장
            DataFrame 객체.to_excel("파일 이름(경로)")

        2-4-4. 여러 개의 데이터프레임을 하나의 Excel 파일로 저장
            pandas.ExcelWriter( "파일 이름(경로)" )

            예 ] ex10.py 참고
                writer = pd.ExcelWriter("./df_excelwriter.xlsx")
                df1.to_excel(writer, sheet_name="sheet1")
                df2.to_excel(writer, sheet_name="sheet2")
                writer.save()