# day04

* UCI 머신러닝 저장소에서 제공하는 자동차 연비(auto mpg) 데이터셋 사용
1. 데이터프레임의 구조
    - 파이썬 클래스로 만들어짐
    - 데이터프레임 크기, 데이터 구성 항목, 자료형, 통계 수치 등의 속성과 메소드 포함

    1-1. 데이터 내용 미리보기
        앞부분 미리보기: DataFrame 객체.head(n)
        뒷부분 미리보기: DataFrame 객체.tail(n)

    1-2. 데이터 요약 정보 확인하기
        1) 데이터프레임의 크기(행, 열) : 투플로 반환
            DataFrame 객체.shape

        2) 데이터프레임의 기본 정보
            클래스유형, 행 인덱스의 구성, 열 이름의 종류와 개수, 각 열의 자료형과 개수, 메모리 할당량
                DataFrame 객체.info()

        < 판다스 자료형 >

                판다스 자료형               파이썬 자료형                           비고
            -----------------------------------------------------------------------------------------------------
            int64                       int                                 정수형 데이터
            float64                     float                               실수형 데이터(소수점이 있는 수)
            object                      string                              문자열 데이터
            datetime64, timedelta64     없음(datetime 라이브러리 활용)      시간 데이터
            -----------------------------------------------------------------------------------------------------
            - info() 메소드와 데이터프레임 클래스의 dtypes 속성을 활용하여 확인 가능
            - 특정 열만 선택하여 적용하는 것도 가능

        3) 데이터프레임의 기술 통계 정보 요약
            - 산술(숫자) 데이터를 갖는 열에 대한 주요 기술 통계 정보(평균, 표준편차, 최대값, 최소값, 중간값 등)를 요약하여 출력
            - 산술 데이터가 아닌 열에 대한 정보를 포함하고 싶을 땐, include='all' 옵션 추가
                DataFrame 객체.describe()

            - include='all' 옵션 추가 시 unique(고유값 개수), top(최빈값), freq(빈도수)에 대한 정보가 추가됨
            - 단, 산술 데이터를 가진 열에 대해서는 위 세 가지 추가되는 항목에 NaN 값이 표시됨
    
    1-3. 데이터 개수 확인
        1) 각 열의 데이터 개수
            - info() 메소드는 반환값이 없어서 다시 사용하기 어려움
            - count() 메소드는 각 열이 가지고 있는 데이터 개수를 시리즈 객체로 반환
            열 데이터 개수 확인: DataFrame 객체.count()

        2) 각 열의 고유값 개수
            - 고유값이 행 인덱스가 되고, 고유값의 개수가 데이터 값이 되는 시리즈 객체가 만들어짐
            - dropna=True 옵션을 설정하면 데이터 값 중 NaN을 제외하고 개수를 계산함(default는 NaN 포함)
                열 데이터의 고유값 개수: DataFrame 객체[*열 이름*].value_counts()

--------------------------------------------------------------------------------------------------------------------------------------------
2. 통계 함수 적용
    2-1. 평균값
        - 모든 열의 평균값: DataFrame 객체.mean()
        - 특정 열의 평균값: DataFrame 객체(*열 이름*).mean()

    2-2. 중간값
        - 모든 열의 중간값: DataFrame 객체.median()
        - 특정 열의 중간값: DataFrame 객체(*열 이름*).median()

    2-3. 최대값
        - 모든 열의 최대값: DataFrame 객체.max()
        - 특정 열의 최대값: DataFrame 객체(*열 이름*).max()
        * 문자열 데이터를 가진 열에 대해서는 문자열을 ASCII 숫자로 변환하여 크고 작음을 비교

    2-4. 최소값
        - 모든 열의 최소값: DataFrame 객체.min()
        - 특정 열의 최소값: DataFrame 객체(*열 이름*).min()
        * 문자열 데이터를 가진 열에 대해서는 문자열을 ASCII 숫자로 변환하여 크고 작음을 비교
        (데이터를 제거하거나 자료형을 변환하여 정리하는 작업은 추후 다룸)

    2-5. 표준편차
        - 모든 열의 표준편차: DataFrame 객체.std()
        - 특정 열의 표준편차: DataFrame 객체(*열 이름*).std()
        * 문자열 데이터를 가진 열에 대해서는 계산을 하지 않는다.

    2-6. 상관계수
        두 변량 X, Y 사이의 상관관계의 정도를 나타내는 수치(계수)
        상관계수 r는 항상 부등식 －1≤r≤1을 만족시키며, 양의 상관관계가 있을 때는 r＞0, 음의 상관관계가 있을 때는 r＜0이다. 또 무상관일 때는 r＝0이 된다.

        * 산술 데이터를 가진 열로 짝을 지을 수 있는 모든 경우의 수를 찾아서 두 열(변수) 사이의 상관계수를 구한다.
        * 문자열은 계산이 불가능하기 때문에 포함하지 않는다.
        - 모든 열의 상관계수: DataFrame 객체.corr()
        - 특정 열의 상관계수: DataFrame 객체(열 이름의 리스트).corr()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
3. 판다스 내장 그래프 도구 활용
    - 시리즈 또는 데이터프레임 객체에 plot() 메소드를 적용
    - kind 옵션으로 그래프의 종류 선택 가능

    kind 옵션               설명                    kind 옵션               설명
    --------------------------------------------------------------------------------------------
    'line'              선 그래프                   'kde'               커널 밀도 그래프
    'bar'               수직 막대 그래프            'area'              면적 그래프
    'barh'              수평 막대 그래프            'pie'               파이 그래프
    'his'               히스토그램                  'scatter'           산점도 그래프
    'box'               박스 플롯                   'hexbin'            고밀도 산점도 그래프
    --------------------------------------------------------------------------------------------

    1) 선 그래프
        DataFrame 객체.plot()
    
    2) 막대 그래프
        DataFrame 객체.plot(kind='bar')

    3) 히스토그램
        DataFrame 객체.plot(kind='hist')

    4) 산점도
        두 변수의 관계를 나타냄
        DataFrame 객체.plot(x='열이름', y='열이름', kind='scatter')

    5) 박스 플롯
        특정 변수의 데이터 분포와 분산 정도에 대한 정보 제공
        - 모든 열: DataFrame 객체.plot(kind='box')
        - 특정 열: DataFrame 객체[[*선택할 열*]].plot(kind='box')
            