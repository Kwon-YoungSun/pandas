        				 
        1-2-5. 원소 선택
            1개의 행과 2개 이상의 열을 선택하거나 반대로 2개 이상의 행과 1개의 열을 선택하는 경우
            시리즈 객체가 반환된다.
            
            2개 이상의 행과 2개 이상의 열을 선택하면, 데이터프레임 객체를 반환한다.
            
            - 인덱스 이름: DataFrame 객체.loc[행 인덱스, 열이름]
            - 정수 위치 인덱스: DataFrame 객체.iloc[행 번호, 열 번호]

        1-2-6. 열 추가
            열 추가: DataFrame 객체[ '추가하려는 열 이름' ] = 데이터 값 (또는 배열)

        1-2-7. 행 추가
            행 추가: DataFrame.loc[ '새로운 행 이름' ] = 데이터 값 (또는 배열)

        1-2-8. 원소 값 변경
            원소 값 변경: DataFrame 객체의 일부분 또는 원소를 선택 = 새로운 값

        1-2-9. 행, 열의 위치 바꾸기
            행, 열 바꾸기: DataFrame 객체.transpose() 또는 DataFrame 객체.T

    1-3. 인덱스 활용
        1-3-1. 특정 열을 행 인덱스로 설정
            set_index 메소드를 사용하여 데이터프레임의 특정 열을 행 인덱스로 설정한다.
            DataFrame 객체.set_index( [ '열 이름' ] 또는 '열 이름')

            set_index() 메소드를 사용하여 행 인덱스를 새로 지정하면 기존 행 인덱스는 삭제된다.

        1-3-2. 행 인덱스 재배열
            - 데이터프레임의 행 인덱스를 새로운 배열로 재지정할 수 있음
            - 새로운 데이터프레임 객체 반환
            새로운 배열로 행 인덱스를 재지정: DataFrame 객체.reindex( 새로운 인덱스 배열 )

        1-3-3. 행 인덱스 초기화
            - 이 때 기존 행 인덱스는 열로 이동한다.
            - 새로운 데이터프레임 객체를 반환
            정수형 위치 인덱스로 초기화: DataFrame 객체.reset_index()

        1-3-4. 행 인덱스를 기준으로 데이터프레임 정렬
            - ascending 옵션을 사용하여 오름차순 또는 내림차순 정렬
            -새롭게 정렬된 데이터프레임 반환
            행 인덱스 기준 정렬: DataFrame 객체.sort_index( )

            참고 ] 특정 열의 데이터 값을 기준으로 데이터프레임 정렬하기
                열 기준 정렬: DataFrame 객체.sort_values()

    1-4. 산술연산
        1-4-1. 시리즈 연산
            < 시리즈 vs 숫자 >
                - 시리즈 객체에 어떤 숫자를 더하면 시리즈의 개별 원소에 각각 숫자를 더하고 계산한 결과를 시리즈 객체로 반환한다.
                - 덧셈, 뺄셈, 곱셈, 나눗셈 모두 가능

                시리즈와 숫자 연산: Series객체 + 연산자(+, -, *, /) + 숫자

            < 시리즈 vs 시리즈 >
                - 시리즈와 시리즈 사이에 사칙연산을 처리
                - 같은 인덱스를 가진 원소끼리 계산하고, 인덱스에 연산 결과를 매칭하여 새 시리즈 반환
                시리즈와 시리즈 연산: Series1 + 연산자(+, -, *, /) + Series2

            연산을 하는 두 시리즈의 원소 개수가 다르거나, 시리즈의 크기가 같더라도 인덱스 값이 다를 수 있음
            어느 한쪽에만 인덱스가 존재하고 다른쪽에는 짝을 지을 수 있는 동일한 인덱스가 없는 경우 정상적으로 연산을 처리할 수 없다.
            
            참고 ] 연산 메소드
                - 객체 사이에 공통 인덱스가 없거나 NaN이 포함된 경우 연산 결과는 NaN으로 반환된다.
                - 이러한 상황을 피하려면 연산 메소드에 fill_value 옵션을 설정하여 적용한다.
                    연산 메소드 사용(시리즈와 시리즈 덧셈): Series1.add(Series2, fill_value=0)

    
        1-4-3. 데이터프레임 연산
            < 데이터프레임 vs 숫자 >
                데이터프레임과 숫자 연산: DataFrame 객체 + 연산자(+, -, *, /) + 숫자

            < 데이터프레임 vs 데이터프레임 >
                데이터프레임의 연산자 활용: DataFrame1 + 연산자(+, -, *, /) + DataFrame2
                