# day01

1. 판다스 자료구조
	1-1. 시리즈 : 1차원 배열
		- 파이썬 딕셔너리와 비슷한 구조
		- 시리즈의 인덱스는 데이터값의 위치를 나타내는 이름표 역할
		
		< 시리즈 만들기 >
			딕셔너리 → 시리즈 변환: pandas.Series( 딕셔너리 )
			
		1-1-1. 인덱스 구조
			- 정수형 위치 인덱스(integer position) : 0, 1, 2.... n
			- 인덱스 이름(index name) 또는 인덱스 라벨(index label) : name1, name2, name3....
	
		1-1-2. 원소 선택
			- 원소의 위치를 나타내는 주소 역할을 하는 인덱스를 이용하여 시리즈의 원소 선택
			- 하나의 원소를 선택할 수도 있고, 여러 원소를 한꺼번에 선택할 수 있다.

	1-2. 데이터프레임 : 2차원 배열 
		- 여러개의 열벡터들이 같은 행 인덱스를 기준으로 줄지어 결합된 2차원 벡터 또는 행렬(matrix)이다.
		- 열은 종목코드, 회사이름, 액면가 등 공통의 속성이나 범주로 보통 변수로 활용
		- 행은 데이터베이스의 레코드와 같은 역할
		    c0  c1  c2  c3  c4
			0   1   4   7  10  13
			1   2   5   8  11  14
			2   3   6   9  12  15

		< 데이터프레임 만들기 >
			같은 길이(원소의 개수가 동일한) 1차원 배열 여러 개 필요
			즉, 여러 개의 시리즈(column)를 모아 놓은 집합으로 이해

			딕셔너리 → 데이터프레임 변환: pandas.DataFrame( 딕셔너리 객체 )
			
		1-1-1. 행 인덱스/열 이름 설정
			pandas.DataFrame( 2차원 배열,
							  index=행 인덱스 배열,
							  columns=열 이름 배열 )

			- 행 인덱스 변경: DataFrame 객체.index = 새로운 행 인덱스 배열
			- 열 이름 변경: DataFrame 객체.columns = 새로운 열 이름 배열

			참고 ] 데이터프레임에 rename() 메소드를 적용하면 행 인덱스 또는 열 이름의 일부를 선택하여 변경할 수 있음
				   주의할 점: 원본 객체를 직접 수정하는 것이 아니라 새로운 데이터프레임 객체를 반환하는 점에 유의한다. 
				   - 행 인덱스 변경: DataFrame 객체.rename(index={기존 인덱스:새 인덱스, …})
				   - 열 이름 변경: DataFrame 객체.rename(index={기존 이름:새 이름, …})
		
		1-1-2. 행/열 삭제 : drop() 메소드 이용
			행을 삭제할 때는 축 옵션으로 axis=0을 입력하거나 별도로 입력하지 않는다.
			반면, 축 옵션으로 axis=1을 입력하면 열을 삭제한다.
			동시에 여러 개의 행 또는 열을 삭제하려면 리스트 형태로 입력한다.

			주의할 점: 원본 객체를 직접 수정하는 것이 아니라 새로운 데이터프레임 객체를 반환하는 점에 유의한다. (rename과 동일)
						=====> 원본 객체를 직접 변경하기 위해서 inplace=True 옵션 추가

			- 행 삭제: DataFrame 객체.drop(행 인덱스 또는 배열, axis=0)
			- 열 삭제: DataFrame 객체.drop(열 이름 또는 배열, axis=1)
			
		
		1-1-3. 행 선택
			인덱스 이름을 기준으로 행을 선택할 때는 loc를 이용하고, 정수형 위치 인덱스를 사용할 때는 iloc를 이용
			
				   구분		|				  loc					|					iloc
			-------------------------------------------------------------------------------------------------------
				탐색 대상	|	인덱스 이름(Index label)			|	정수형 위치 인덱스(Integer position)
			-------------------------------------------------------------------------------------------------------	
				범위 지정	|	가능(범위의 끝 포함)				|	가능(범위의 끝 제외)
							|		예) ['a':'c'] → 'a', 'b', 'c'	|		예) [3:7] → 3, 4, 5, 6(* 7 제외)
			-------------------------------------------------------------------------------------------------------
			
		1-1-4. 열 선택
			열 1개 선택(시리즈 생성): Dataframe 객체["열 이름"] 또는 DataFrame 객체.열 이름
			열 n개 선택(데이터프레임 생성): DataFrame 객체[ [ 열1, 열2, ... , 열n ] ]

			대괄호 안에 ['음악', '체육'] 점수를 열 이름의 리스트로 입력하면 데이터프레임이 반환된다.
			또한 df[['수학']]과 같이 2중 대괄호를 사용하면 열 이름 1개를 원소로 갖는 리스트를 사용하는 경우에도 시리즈가 아닌 데이터프레임을 반환한다.

			
		** 참고] 범위 슬라이싱의 고급 활용
				범위 슬라이싱: DataFrame 객체.iloc[ 시작 인덱스 : 끝 인덱스 : 슬라이싱 간격 ]

				슬라이싱 범위는 "시작 인덱스"를 포함하고 "끝 인덱스"보다 1이 작은 인덱스까지 포함한다. "슬라이싱 간격"을 지정하지 않으면 1씩 증가한다.
					예 ] 데이터프레임 df의 모든 행에 대하여 0행부터 2행 간격으로 선택하려면 df.iloc[ : : 2] 라고 입력한다.
					
        				 df.iloc[0:3:2]             ====> df의 0행부터 2행까지 2행 간격으로 선택
        				 df.iloc[: : -1]            ====> df의 모든 행을 선택하여 역순으로 정렬
        				 
        1-1-5. 원소 선택
            1개의 행과 2개 이상의 열을 선택하거나 반대로 2개 이상의 행과 1개의 열을 선택하는 경우
            시리즈 객체가 반환된다.
            
            2개 이상의 행과 2개 이상의 열을 선택하면, 데이터프레임 객체를 반환한다.
            
            - 인덱스 이름: DataFrame 객체.loc[행 인덱스, 열이름]
            - 정수 위치 인덱스: DataFrame 객체.iloc[행 번호, 열 번호]
            		
        				 
        							 