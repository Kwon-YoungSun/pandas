# day07
# 데이터 사전 처리

1. 누락 데이터 처리
    - 데이터 분석의 정확도는 분석 데이터의 품질에 의해 좌우됨
    - 데이터 품질을 높이기 위해서는 누락 데이터, 중복 데이터 등 오류를 수정하고 분석 목적에 맞게 변형하는 과정이 필요

    < 누락 데이터를 찾는 직접적인 방법 >
        1) isnull() : 누락 데이터면 True를 반환하고, 유효한 데이터가 존재하면 False를 반환한다.
        2) notnull() : 유효한 데이터가 존재하면 True를 반환하고, 누락 데이터면 False를 반환한다.

    1) 누락 데이터 확인 : ex01.py
    2) 누락 데이터 제거 : ex02.py
    3) 누락 데이터 치환 : ex03.py
    4) 가장 많이 나타나는 값으로 바꾸기 : ex04.py
    5) 이웃하고 있는 값으로 바꾸기 : ex05.py

    < 누락 데이터가 NaN으로 표시되지 않은 경우 >
        0이나 문자 '-', '?'와 같은 값으로 입력되는 경우
        ===> 판다스에서 replace() 메소드를 활용하여 NumPy에서 지원하는 np.nan으로 변경해 주는 것이 좋음

        단, np.nan을 사용하기 위해서는 'import numpy as np'와 같이 NumPy 라이브러리를 먼저 임포트해야함.
        ex) '?'을 np.nan으로 치환: df.replace('?', np.nan, inplace=True)

2. 중복 데이터 처리
    1) 중복 데이터 확인 : ex06.py
    2) 중복 데이터 제거 : ex07.py

3. 데이터 표준화
    3-1. 단위 환산
        영미권에서 주로 사용하는 마일, 야드, 온스 등의 단위는 한국에서 사용하는 미터, 평, 그램 등으로 변환하는 것이 좋다.
        ==> ex08.py

    3-2. 자료형 변환
        숫자가 문자열로 저장된 경우에 숫자형(int 또는 float)로 변환해야 함
        ==> ex09.py
        
        * 카테고리형 : 파이썬 문자열 객체의 배열(리스트)와 비슷한 판다스 라이브러리의 자료형 
--------------------------------------------------------------------------------------------------------------------------------------------------------
4. 범주형(카테고리) 데이터 처리
    4-1. 구간 분할
        - 데이터 분석 알고리즘에 따라서는 연속 데이터를 그대로 사용하기 보다는 일정한 구간(bin)으로 나눠서 분석하는 것이 효율적인 경우가 있다.
        - 연속 변수를 일정한 구간으로 나누고, 각 구간을 범주형 이산 변수로 변환하는 과정을 구간 분할(binning)
        - 판다스의 cut() 함수 이용

    4-2. 더미 변수
        - 범주형 데이터를 회귀분석 등 머신러닝 알고리즘에 바로 사용할 수 없는 경우가 있음
        - 그러므로 컴퓨터가 인식 가능한 입력값으로 변환해야 한다.
        - 이 때 숫자 0 또는 1로 표현되는 더미 변수(dummy variable)를 사용
        - 이 때 0과 1은 어떤 특성(feature)이 있는지 없는지 여부만을 표시함. 해당 특성이 존재하면 1로 표현하고, 존재하지 않으면 0으로 구분하는 개념

5. 정규화
    - 각 변수(데이터프레임의 열)에 들어 있는 숫자 데이터의 상대적 크기 차이 때문에 머신러닝 분석결과가 달라질 수 있다.
    - 따라서 숫자 데이터의 상대적인 크기 차이를 제거할 필요가 있다.
    - 각 열(변수)에 속하는 데이터 값을 동일한 크기 기준으로 나타내는 것을 정규화(normalization)라고 한다.
    - 정규화 과정을 거친 데이터의 범위는 0~1 또는 -1~1이 된다.

6. 시계열 데이터
    시계열 데이터 표현에 자주 이용되는 두 가지 유형
    1) Timestamp : 특정한 시점 기록
    2) Period    : 두 시점 사이의 일정한 기간 나타냄

    6-1. 다른 자료형을 시게열 객체로 변환
        1) 문자열을 Timestamp로 변환    ==> ex15.py
            to_datetime() : 판다스 Timestamp를 나타내는 datetime64 자료형으로 변환 가능

        2) Timestamp를 Period로 변환    ==> ex16.py
            to_period() 함수 이용
            다양한 freq 옵션의 종류 : 본책 206p 참고

    6-2. 시계열 데이터 만들기
        1) Timestamp 배열   ==> ex17.py
        2) Period 배열      ==> ex18.py
        

    6-3. 시계열 데이터 활용
        1) 날짜 데이터 분리     ==> ex19.py
        2) 날짜 인덱스 활용     ==> ex20.py
