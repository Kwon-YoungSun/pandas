# day08

# 데이터프레임의 다양한 응용

1. 함수 매핑
    시리즈 또는 데이터프레임의 개별 원소를 특정 함수에 일대일 대응시키는 과정

    1-1. 개별 원소에 함수 매핑
        1) 시리즈 원소에 함수 매핑
            Series객체.apply(매핑 함수)

        2) 데이터프레임 원소에 함수 매핑
            DataFrame 객체.applymap(매핑 함수)
    
    1-2. 시리즈 객체에 함수 매핑
        1) 데이터프레임의 각 열에 함수 매핑
            - 모든 열을 하나씩 분리하여 매핑 함수의 인자로 각 열(시리즈)이 전달됨.
            DataFrame 객체.apply(매핑 함수, axis=0)

        2) 데이터프레임의 각 행에 함수 매핑
            - 데이터프레임의 각 행을 매핑 함수의 인자로 전달
            - 데이터프레임의 행 인덱스가 매핑 결과로 반환되는 시리즈의 인덱스가 됨
            DataFrame 객체.apply(매핑함수, axis=1)

    1-3. 데이터프레임 객체에 함수 매핑
        - 이때 사용하는 함수가 반환하는 리턴값에 따라 pipe() 메소드가 반환하는 객체의 종류가 결정된다.
        - 데이터프레임을 반환하는 경우, 시리즈를 반환하는 경우, 개별 값을 반환하는 경우로 나뉨
        DataFrame 객체.pipe(매핑 함수)

--------------------------------------------------------------------------------------------------
2. 열 재구성
    2-1. 열 순서 변경
        DataFrame 객체[재구성한 열 이름의 리스트]

    2-2. 열 분리 ===> ex08.py
        하나의 열이 여러 가지 정보를 담고 있을 때, 각 정보를 서로 분리해서 사용하는 경우가 많음
        예를 들어, 사람의 이름이 들어 있는 열을 '성'과 '이름'을 구분하는 것
        또는 '연', '월', '일'을 구분하여 3개의 열을 만드는 것
        
        Series객체.str.get(인덱스)

3. 필터링
    특정 조건식을 만족하는 원소만 따로 추출하는 개념

    3-1. 불린 인덱싱    ===> ex09.py
        조건식을 적용하여 각 원소가 조건을 만족하는지 여부를 참과 거짓 값으로 표시하여 불린 시리즈를 만듦
        
        DataFrame 객체[불린 시리즈]

    3-2. isin() 메소드 활용
        데이터프레임의 열에 isin() 메소드를 적용하면 특정 값을 가진 행들을 따로 추출할 수 있다.
        이때 isin() 메소드에 데이터프레임의 열에서 추출하려는 값들로 만든 리스트를 전달한다.

        DataFrame의 열 객체.isin(추출 값의 리스트)


4. 데이터프레임 합치기
    4-1. 데이터프레임 연결  ===> ex11.py
        pandas.concat(데이터프레임의 리스트)

    4-2. 데이터프레임 병합 ===> ex12.py
        SQL의 join 명령과 비슷한 방식으로 어떤 기준에 의해 두 데이터프레임을 병합하는 개념
        이 때 기준이 되는 열이나 인덱스를 키(key)라고 부르며, 키가 되는 열이나 인덱스는 반드시 양쪽 데이터프레임에 모두 존재해야 함
        
        pandas.merge( df_left, df_right, how='inner', on=None )
        ===> on=None 옵션과 how='inner' 옵션이 기본값으로 적용됨

    4-3. 데이터프레임 결합
        - 판다스 join() 메소드는 merge() 함수를 기반으로 만들어졌기 때문에 기본 작동 방식이 서로 비슷함
        - 단, join() 메소드는 두 데이터프레임의 행 인덱스를 기준으로 결합하는 점에서 merge() 함수와 차이가 있다.
        - 하지만 join() 메소드에 대해서도 on=keys 옵션을 설정하면 행 인덱스 대신 다른 열을 기준으로 결합하는 것이 가능하다.

        행 인덱스 기준으로 결합 : DataFrame.join(DataFrame2, how='left')


5. 그룹 연산
    특정 기준을 적용하여 몇 개의 그룹으로 분할하여 처리하는 것

    5-1. 그룹 객체 만들기(분할 단계)
        1) 1개 열을 기준으로 그룹화
            DataFrame 객체.groupby(기준이 되는 열)

        2) 여러 열을 기준으로 그룹화
            DataFrame 객체.groupby(기준이 되는 열의 리스트)

    5-2. 그룹 연산 메소드(적용-결합 단계)
        1) 데이터 집계              ===> ex15.py
            그룹 객체에 다양한 연산을 적용하는 과정

            - 표준편차 데이터 집계(내장 함수)   : group 객체.std()

            집계 연산을 처리하는 사용자 정의 함수를 그룹 객체에 적용하려면
            - agg() 메소드 데이터 집계          : group 객체.agg(매핑함수)

            동시에 여러 개의 함수를 사용하여 각 그룹별 데이터에 대한 집계 연산을 처리할 수 있다.
            각각의 열에 여러 개의 함수를 일괄 적용할 때는 리스트 형태로 인수를 전달하고,
            열마다 다른 종류의 함수를 적용하려면 [열 : 함수] 형태의 딕셔너리를 전달한다.
            - 모든 열에 여러 함수를 매핑: group객체.agg([함수1, 함수2, 함수3, ...])
            - 각 열마다 다른 함수를 매핑: group객체.agg({'열1' : 함수1, '열2' : 함수2, ...})

        2) 그룹 연산 데이터 변환        ===> ex16.py
            transform() 메소드는 그룹별로 구분하여 각 원소에 함수를 적용하지만,
            그룹별 집계 대신 각 원소의 본래 행 인덱스와 열 이름을 기준으로 연산 결과 반환
            즉, 그룹 연산의 결과를 원본 데이터프레임과 같은 형태로 변형하여 정리하는 것
            - 데이터 변환 연산 : group 객체.transform(매핑 함수)

        3) 그룹 객체 필터링             ===> ex17.py
            그룸 객체에 filter() 메소드를 적용할 때 조건식을 가진 함수를 전달하면 조건이 참인 그룹만을 남긴다.
            - 그룹 객체 필터링 : group 객체.filter(조건식 함수)

        4) 그룹 객체에 함수 매핑        ===> ex18.py
            사용자가 원하는 대부분의 연산을 그룹 객체에도 적용할 수 있다.
            범용 메소드: group 객체.apply(매핑 함수)

---------------------------------------------------------------------------------------------------------------------------------------
6. 멀티 인덱스 ===> ex19.py

7. 피벗       ===> ex20.py
    판다스의 pivot_table() 함수는 엑셀에서 사용하는 피벗테이블과 비슷한 기능을 처리한다.
